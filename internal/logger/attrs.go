package logger

import (
	"context"
	"log/slog"
	"time"

	"github.com/FlyrInc/flyr-lib-go/internal/config"
	"go.opentelemetry.io/otel/sdk/resource"
)

// InjectRootAttrs adds root attributes to a slog handler.
//
// This function enhances the given slog.Handler with a set of attributes
// that are common across the application, such as service instance ID,
// and service version The attributes are being fetched from the environment
// variable "OTEL_RESOURCE_ATTRIBUTES". The goal is to have a consistent
// set of attributes across all logs and spans. These attributes are typically added once at
// the root level and included in all logs generated by the handler.
// InjectRootAttrs returns a new slog.Handler with the additional attributes applied.
func InjectRootAttrs(h slog.Handler, cfg config.LoggerConfig) slog.Handler {
	resourceInfo, _ := resource.New(
		context.Background(),
		resource.WithFromEnv(),
	)
	logAttributes := make([]slog.Attr, 0, 3)
	logAttributes = append(logAttributes, slog.String(config.SERVICE_NAME, cfg.Service()))

	attributes := resourceInfo.Attributes()
	for _, attr := range attributes {
		if string(attr.Key) == config.SERVICE_INTANCE_ID {
			logAttributes = append(logAttributes, slog.String(config.SERVICE_INTANCE_ID, attr.Value.AsString()))
		}

		if string(attr.Key) == config.SERVICE_VERSION {
			logAttributes = append(logAttributes, slog.String(config.SERVICE_VERSION, attr.Value.AsString()))
		}
	}

	return h.WithAttrs(logAttributes)
}

// replaceAttributes modifies specific attributes of a slog entry.
//
// This function checks each attribute's key and applies transformations
// as necessary.These adjustments ensure that
// logs are standardized according to custom requirements before being
// handled.
// It returns back the modified attribute.
func replaceAttributes(groups []string, a slog.Attr) slog.Attr {
	if a.Key == "time" {
		a.Value = slog.AnyValue(time.Now().UTC())
	}

	if a.Key == "msg" {
		a.Key = config.LOG_MESSAGE_KEY
	}

	return a
}
